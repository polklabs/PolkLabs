{
  "id": "bit-simulator",
  "title": "Logic Circuit Simulator",
  "meta": "Creating a digital logic simulator using c# and unity3d. A program that allows the user to create circuits using components similar to real life ICs.",
  "bgimg": "screenshot_2.png",
  "github": "https://github.com/polklabs/Project-Bit",
  "demo": "",
  "languages": ["C#"],
  "reason": "Personal Project",
  "hardware": [],
  "technologies": ["Unity3D"],
  "lastUpdate": "10/13/19",
  "sections": [
    {
      "type": "header",
      "text": "About Project Bit",
      "noPadding": true
    },
    {
      "type": "text",
      "text": [
        "The goal of this project is to create a logic simulator that is accurate enough to build a working 8 bit computer that runs in near realtime. The components available in the simulator should be similar to components you would be able to buy in real life."
      ]
    },
    {
      "type": "html",
      "html": "<h3>Inspired By: </h3><p><a href=\"https://eater.net/8bit\" class=\"pl-link\">Ben Eater 8Bit Computer</a></p>"
    },
    {
      "type": "dict",
      "keyValue": [
        {
          "key": "Language",
          "value": "C#"
        },
        {
          "key": "Type",
          "value": "Unity3D"
        }
      ]
    },
    {
      "type": "text",
      "text": [
        "Below is a 12 hour clock. The clock is made from 4-bit counters, AND/NOR gates, and 7 segment decoders. Plus a clock chip that pulses on and off. The clock will keep time, for the video the timing is sped up."
      ]
    },
    {
      "type": "video",
      "src": "Clock.mp4",
      "srcType": "video/mp4"
    },
    {
      "type": "text",
      "text": [
        "Below is a shift register. The shift register chip (PQ210G) is made out of D Flip Flops and AND Gates. The G in the chip name specifies that it is simulated using individual AND/OR/NOT/etc.. gates. Chips without the G have their inputs and outputs simulated directly in software, such as the EEPROM chip"
      ]
    },
    {
      "type": "video",
      "src": "ShiftRegister.mp4",
      "srcType": "video/mp4"
    },
    {
      "type": "grid",
      "items": [
        {
          "type": "pic",
          "src": "Screenshot 2023-04-07 115522.png",
          "alt": "Screenshot",
          "text": "Binary to 7-Segment display"
        },
        {
          "type": "pic",
          "src": "Screenshot 2023-04-07 114754.png",
          "alt": "Screenshot",
          "text": "A 12 hour clock that keeps real time"
        }
      ]
    },
    {
      "type": "header",
      "text": "How It Works"
    },
    {
      "type": "text",
      "title": "The Basics",
      "subtitle": "Components",
      "text": [
        "The basis of the simulator is built on components and breadboards. Components are of six main types:\n\t1. Wires: Connect pins of the breadboard together.\n\t2. Basic Gates: Sets of simple AND, OR, XOR and NOT gates.\n\t3. Special Chips: Includes clocks, adders and counters.\n\t4. Memory Chips: EEPROM and Ram chips are part of this group.\n\t5. Inputs: These are different types of switches that can be controlled manually.\n\t6. Outputs: Includes LEDs and 7-Segment Displays"
      ]
    },
    {
      "type": "text",
      "subtitle": "Breadboard",
      "text": [
        "These components can be placed on the breadboard the same way you would place them on a real breadboard. Such as Integrated Circuits being placed across the center divider. These components are all based on integrated circuits and components that can be bought in real life.",
        "The breadboards main purpose is to connect all these pieces together. When a component's output value has changed it sends an update to the breadboard, the breadboard then updates the pin's value (High, Low, Unknown). It then propagates this update to all connected pins, in the same row and through wires. If a pin value is changed (High to Low, Low to High), the breadboard will then queue up all connected components to be updated. Each frame the breadboard goes through this queue calling the update function on each component which in turn may trigger this whole process again."
      ]
    },
    {
      "type": "text",
      "title": "Into The Weeds",
      "subtitle": "Integrated Circuits (IC)",
      "text": [
        "The main wrapper object for all of the circuit components is the IntegratedCircuit object. This object connects the chip/gate/other logic to the breadboard component. The IC has arrays for the input and output values. It also contains references to the nodes/wires that it is connected to. This allows the IC to update it's inputs on on demand and propagate the output values to other ICs and nodes. This object can be created with any number of pins allowing for more customization.",
        "The IC object does not care about how it's outputs are changed based on its inputs. The IC is only aware the output values that change after it calls it's InternalUpdate method. This InternalUpdate value can be tied to anything from a Chip object, Gate object or even a Unity GameObject reference.",
        "This object also has a few other features such as dedicated Positive and Ground booleans to allow for resetting all internal/child states. These components are versatile and can be used fro everything from Chips to LEDs, and even wires.",
        "The following code is an example of the mapping for a Quad Xor Gates Integrated Circuit. See further down for the Chip implementation of the Quad Xor Gate"
      ]
    },
    {
      "type": "code",
      "code": "using System.Runtime.Serialization;\n\nnamespace IntegratedCircuits\n{\n\t[DataContract]\n\tpublic class PQ030G_XorGate : IntegratedCircuit\n\t{\n\t\t[DataMember]\n\t\tprivate readonly Chips.Quad_Xor_Gates Chip;\n\n\t\tpublic PQ030G_XorGate() : base(14)\n\t\t{\n\t\t\tIcType = ICType.ic4;\n\t\t\tModelName = \"IC14\";\n\n\t\t\tChip = new Chips.Quad_Xor_Gates();\n\n\t\t\tPinModes[2] = PinMode.Output;\n\t\t\tPinModes[5] = PinMode.Output;\n\t\t\tPinModes[7] = PinMode.Output;\n\t\t\tPinModes[10] = PinMode.Output;\n\t\t}\n\n\t\tprotected override void InternalUpdate()\n\t\t{\n\t\t\tChip.Input[0] = PinState[0] == State.HIGH ? true : false;\n\t\t\tChip.Input[1] = PinState[1] == State.HIGH ? true : false;\n\t\t\tChip.Input[2] = PinState[3] == State.HIGH ? true : false;\n\t\t\tChip.Input[3] = PinState[4] == State.HIGH ? true : false;\n\t\t\tChip.Input[4] = PinState[8] == State.HIGH ? true : false;\n\t\t\tChip.Input[5] = PinState[9] == State.HIGH ? true : false;\n\t\t\tChip.Input[6] = PinState[11] == State.HIGH ? true : false;\n\t\t\tChip.Input[7] = PinState[12] == State.HIGH ? true : false;\n\n\t\t\tChip.Update();\n\n\t\t\tPinState[2] = Chip.Output[0] ? State.HIGH : State.LOW;\n\t\t\tPinState[5] = Chip.Output[1] ? State.HIGH : State.LOW;\n\t\t\tPinState[7] = Chip.Output[2] ? State.HIGH : State.LOW;\n\t\t\tPinState[10] = Chip.Output[3] ? State.HIGH : State.LOW;\n\t\t}\n\n\t\tprotected override void InternalReset(bool disable)\n\t\t{\n\t\t\tInternalUpdate();\n\t\t\tbase.InternalReset(disable);\n\t\t}\n\n\t}\n}",
      "language": ["c#"],
      "filename": "PQ030G_XorGate.cs"
    },
    {
      "type": "text",
      "text": [
        "Integrated circuits can also be implemented without Chips. This can improve performance (but it's not as fun). Below is a 4-Bit adder that does not rely on a Chip object."
      ]
    },
    {
      "type": "code",
      "code": "using System.Collections;\nusing System.Runtime.Serialization;\n\n/**\n * 4 Bit Full Adder\n */\nnamespace IntegratedCircuits\n{\n\tpublic class PQ130_Adder4Bit : IntegratedCircuit\n\t{\n\n\t\tpublic PQ130_Adder4Bit() : base(16)\n\t\t{\n\t\t\tIcType = ICType.ic4;\n\t\t\tModelName = \"IC16\";\n\n\t\t\tSetPinModes(0, PinMode.Output);\n\t\t\tSetPinModes(3, PinMode.Output);\n\t\t\tSetPinModes(8, 9, PinMode.Output);\n\t\t\tSetPinModes(12, PinMode.Output);\n\t\t}\n\n\t\tprotected override void InternalUpdate(bool reset)\n\t\t{\n\t\t\tBitArray a = new BitArray(new bool[4] \n\t\t\t{ \n\t\t\t  PinState[4]   == State.HIGH ? true : false,\n\t\t\t  PinState[2]   == State.HIGH ? true : false,\n\t\t\t  PinState[13]  == State.HIGH ? true : false,\n\t\t\t  PinState[11]  == State.HIGH ? true : false\n\t\t\t});\n\t\t\tBitArray b = new BitArray(new bool[4] \n\t\t\t{ \n\t\t\t  PinState[5]   == State.HIGH ? true : false,\n\t\t\t  PinState[1]   == State.HIGH ? true : false,\n\t\t\t  PinState[14]  == State.HIGH ? true : false,\n\t\t\t  PinState[10]  == State.HIGH ? true : false\n\t\t\t});\n\t\t\tint[] ab = new int[2];\n\t\t \n\t\t\ta.CopyTo(ab, 0);\n\t\t\tb.CopyTo(ab, 1);\n\t\t \n\t\t\tint output = ab[0] + ab[1] + (PinState[6] == State.HIGH ? 1 : 0);\n\t\t \n\t\t\tBitArray bitOut = new BitArray(System.BitConverter.GetBytes(output));\n\t\t \n\t\t\t//Outputs\n\t\t\tPinState[8]\t = bitOut[4] ? State.HIGH : State.LOW; //C0\n\t\t\tPinState[3]\t = bitOut[0] ? State.HIGH : State.LOW; //S1\n\t\t\tPinState[0]\t = bitOut[1] ? State.HIGH : State.LOW; //S2\n\t\t\tPinState[12]\t= bitOut[2] ? State.HIGH : State.LOW; //S3\n\t\t\tPinState[9]\t = bitOut[3] ? State.HIGH : State.LOW; //S4\n\t\t}\n\n\t}\n}\n",
      "language": ["c#"],
      "filename": "PQ130_Adder4Bit.cs"
    },
    {
      "type": "text",
      "subtitle": "Chips",
      "text": [
        "The next layer down from IntegratedCircuits are Chips. Chips are wrappers for collections of other chips or gates and wires to connect them all. The update method passes the input values to the input of the internal chips/gates. It then takes the output from those and propagates them to the next gates/chips in line based on how the wires are connected between them.",
        "This method of chip structure allows the creation of new chips from real world circuit diagrams. In addition to gate based simulation, the chips update can be used for logical updating where the output is set based on a logical function rather than building everything out of gates. This allows for easy creation of more complex chips such as EEPROM memory or registers.",
        "The following code and image are equivalent once the input/outputs have been mapped with a IntegratedCircuit object."
      ]
    },
    {
      "type": "grid",
      "items": [
        {
          "type": "code",
          "code": "using Gates;\n\n/**\n * Quad And Gates based on the 74LS86\n * Used in the PQ010G_XorGate\n */\n\nnamespace Chips\n{\n\tpublic class Quad_Xor_Gates : Chip\n\t{\n\t\tpublic Quad_Xor_Gates() : base(8, 4)\n\t\t{\n\t\t\tGate gateA = new XORGate();\n\t\t\tint indexA = AddGate(gateA);\n\n\t\t\tGate gateB = new XORGate();\n\t\t\tint indexB = AddGate(gateB);\n\n\t\t\tGate gateC = new XORGate();\n\t\t\tint indexC = AddGate(gateC);\n\n\t\t\tGate gateD = new XORGate();\n\t\t\tint indexD = AddGate(gateD);\n\n\t\t\t// Gate A\n\t\t\tAddWire(ID, new Wire(0, 0, indexA, false));\n\t\t\tAddWire(ID, new Wire(1, 1, indexA, false));\n\t\t\tAddWire(gateA.ID, new Wire(0, 0, -1, true));\n\n\t\t\t// Gate B\n\t\t\tAddWire(ID, new Wire(2, 0, indexB, false));\n\t\t\tAddWire(ID, new Wire(3, 1, indexB, false));\n\t\t\tAddWire(gateB.ID, new Wire(0, 1, -1, true));\n\n\t\t\t// Gate C\n\t\t\tAddWire(ID, new Wire(4, 0, indexC, false));\n\t\t\tAddWire(ID, new Wire(5, 1, indexC, false));\n\t\t\tAddWire(gateC.ID, new Wire(0, 2, -1, true));\n\n\t\t\t// Gate D\n\t\t\tAddWire(ID, new Wire(6, 0, indexD, false));\n\t\t\tAddWire(ID, new Wire(7, 1, indexD, false));\n\t\t\tAddWire(gateD.ID, new Wire(0, 3, -1, true));\n\t\t}\n\t}\n}",
          "language": ["c#"],
          "filename": "Quad_Xor_Gates.cs"
        },
        {
          "type": "pic",
          "src": "OIP.jpg",
          "alt": "Quad XOR Chip"
        }
      ]
    },
    {
      "type": "text",
      "subtitle": "Gates",
      "text": [
        "Gates are the most basic object that chips and integrated circuits are made out of. These include AND, NAND, OR, NOR, XOR, XNOR, NOT, and buffer gates. Most gates can are defaulted to two or one input and one output, but the number of inputs can be specified for gates such as the NAND gate."
      ]
    },
    {
      "type": "code",
      "code": "public class ANDGate : Gate\n{\n\tpublic ANDGate(int inputs) : base(inputs) { }\n\tpublic ANDGate() : base(2) { }\n\n\tprotected override bool GetOutput()\n\t{\n\t\tbool output = Input[0];\n\t\tforeach (bool bit in Input)\n\t\t{\n\t\t\toutput &= bit;\n\t\t}\n\t\treturn output;\n\t}\n}",
      "language": ["c#"],
      "filename": "ANDGate.cs"
    },
    {
      "type": "list",
      "title": "Limitations",
      "list_style": "disc",
      "align": "left",
      "list": [
        "Does not simulate - voltage, resistance, current",
        "Ignores gate propagation delay - Race Conditions may result in unknown behavior",
        "Application runs at 60fps, any logic updates faster than that may not function properly",
        "Gates and Chips are ideal approximations and will most likely behave differently in real life"
      ]
    },
    {
      "type": "header",
      "text": "Screenshots from older versions"
    },
    {
      "type": "grid",
      "items": [
        {
          "type": "pic",
          "src": "screenshot_1.png",
          "alt": "Screenshot 1",
          "text": "An 8-Bit counter with a clock"
        },
        {
          "type": "pic",
          "src": "screenshot_2.png",
          "alt": "Screenshot 2",
          "text": "Bi-directional buffer gate"
        },
        {
          "type": "pic",
          "src": "screenshot_3.png",
          "alt": "Screenshot 3",
          "text": "Old main menu"
        },
        {
          "type": "pic",
          "src": "2020-08-02.png",
          "alt": "Screenshot 4",
          "text": "Counter using old wire design, also shows paused/debug state"
        }
      ]
    },
    {
      "type": "header",
      "text": "Related Blog Posts"
    },
    {
      "type": "blog",
      "id": "bit-simulator-serialization"
    }
  ]
}
